// <auto-generated />
using System;
using Markey.Persistance.Data.Tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Markey.Persistance.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Markey.Persistance.Data.Tables.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Occupation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2fe24ed-7d91-44af-8441-d05005c56293"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7445),
                            Name = "Piloto"
                        },
                        new
                        {
                            Id = new Guid("4b75d907-631e-46d3-8218-bd77c922bfb5"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7446),
                            Name = "Médico"
                        },
                        new
                        {
                            Id = new Guid("2a454763-42c8-4fa2-9333-13a714d15649"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7447),
                            Name = "Ingeniero"
                        },
                        new
                        {
                            Id = new Guid("4a8480dc-c700-489d-b407-dad996d492bf"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7448),
                            Name = "Abogado"
                        },
                        new
                        {
                            Id = new Guid("4f9121b8-9522-47c8-a587-ee8d6f5f079f"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7449),
                            Name = "Profesor"
                        },
                        new
                        {
                            Id = new Guid("8527d68a-1aa1-4e3c-8fdc-167ec525f536"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7450),
                            Name = "Enfermero"
                        },
                        new
                        {
                            Id = new Guid("6fbbf7f5-3e99-4809-99ee-d534ca36aa41"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7451),
                            Name = "Arquitecto"
                        },
                        new
                        {
                            Id = new Guid("63a7628e-fafa-42f7-8e5b-9428ac7f14cb"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7452),
                            Name = "Carpintero"
                        },
                        new
                        {
                            Id = new Guid("87a8b72c-d172-450f-8443-205326e92d89"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7453),
                            Name = "Electricista"
                        },
                        new
                        {
                            Id = new Guid("cc1454ca-ee7f-4ea9-9e4d-2fd1a740200d"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7454),
                            Name = "Mecánico"
                        },
                        new
                        {
                            Id = new Guid("b6d2be6d-65ce-448f-82cb-da80af7895f5"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7455),
                            Name = "Chef"
                        },
                        new
                        {
                            Id = new Guid("24c41869-6627-460e-9609-3c5095c6e6ef"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7456),
                            Name = "Panadero"
                        },
                        new
                        {
                            Id = new Guid("d9c82c88-607e-4299-945f-0931cffb849c"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7457),
                            Name = "Diseñador Gráfico"
                        },
                        new
                        {
                            Id = new Guid("d1c71d69-f89b-4d7c-b0f8-7c8508335e17"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7458),
                            Name = "Programador"
                        },
                        new
                        {
                            Id = new Guid("06aeafd6-3ea5-444e-a251-bb48ae89c9dc"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7459),
                            Name = "Periodista"
                        },
                        new
                        {
                            Id = new Guid("ac492574-ef15-4e97-a8cc-d8ebef21f58b"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7460),
                            Name = "Actor"
                        },
                        new
                        {
                            Id = new Guid("28134207-94c2-4b40-808a-0a98aa0bc3e4"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7461),
                            Name = "Músico"
                        },
                        new
                        {
                            Id = new Guid("f65b8bad-2a6d-4f7a-8524-5b63934cda3b"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7462),
                            Name = "Fotógrafo"
                        },
                        new
                        {
                            Id = new Guid("b081b1cf-7efc-4504-a5dd-48e390c7b113"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7463),
                            Name = "Policía"
                        },
                        new
                        {
                            Id = new Guid("360ceb30-e678-4415-aeea-e3e01a4bbb25"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7464),
                            Name = "Bombero"
                        },
                        new
                        {
                            Id = new Guid("eae95efd-c252-415c-8050-5d4fe7a2a252"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7465),
                            Name = "Militar"
                        },
                        new
                        {
                            Id = new Guid("d9f0ebe1-d4d4-4de1-a7aa-61a8d3554b3d"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7466),
                            Name = "Contador"
                        },
                        new
                        {
                            Id = new Guid("87a5a235-e7f1-4b62-aee1-075cc97b23ac"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7467),
                            Name = "Dentista"
                        },
                        new
                        {
                            Id = new Guid("b486c08a-4918-452d-a2a8-4214297a7d5c"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7468),
                            Name = "Veterinario"
                        },
                        new
                        {
                            Id = new Guid("698434d2-213d-4aae-a616-bb798931741a"),
                            CreationDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc).AddTicks(7469),
                            Name = "Psicólogo"
                        });
                });

            modelBuilder.Entity("Markey.Persistance.Data.Tables.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Markey.Persistance.Data.Tables.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OccupationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Tokens", (string)null);
                });

            modelBuilder.Entity("Markey.Persistance.Data.Tables.User", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Markey.Persistance.Data.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Markey.Persistance.Data.Tables.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
